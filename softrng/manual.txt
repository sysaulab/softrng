
# MANUAL - SOFTRNG version 0.1

## RNG made FUN and EASY

This program is free software; you can redistribute it and/or
modify it under the terms of the Affero GNU Public Licence version 3.
Other licences available upon request.

Below is the list of basic commands to play with. The IO descriptor indicate
if the command require an input or provide an output. By using simple shell 
pipe, we create combination of generator(s) entropy source(s) and all kind of
other fun things to observe.



COMMANDS

    1. Commands are chained together using pipes.
    2. A chain must start with a source ( s- ).
    3. Any number of filters ( f- ) can be chained
    4. Without a terminator ( -t ) streams are displayed unformatted.

 _Type
|
|   s = Source (nothing in, something out)
|   f = Filter (something in, something out)
|   t = Target (something in, nothing out)
| 
|  _Class
| |
| | ent = Source of entropy
| | prng = Pseudo Random Number Generator
| | test = Various tests used to characterize sequences
| |        Unspecified classes are general tools
| |
| |             * * * INTERNAL COMMANDS * * *
| |
s-ent-chaos                     Spontaneous entropy source.
s-ent-getent                    OS-curated entropy source.
s-gen-password P                Use a password to generate a sequence.
s-file F                        Read file F to output.
s-gen-zeros                     Source of zeros.
s-random                        Default system random generator.
f-prng-qxo64                    PRNG, 2gb/sec, 2mb entropy, 140eb.
f-prng-roxo64                   PRNG, 1gb/sec, 8kb entropy, 512pt.
f-peek                          Display information about the stream.
f-hex                           Convert raw stream to hexadecimal.
f-limit N                       Limit the size of a stream to N bytes
f-fork S                        Use the stream as input to a sub-chain and pass data untouched.
f-merge S                       Insert and mix current stream with the output of S using XOR.
t-file F                        Save a copy of the the stream to file F.
t-sinkhole                      Nothing comes out. (like /dev/null)
t-test-bspec32                  32 bit distribution test.

                * * * PRACTRAND PACKAGE * * *

f-prng-jsf32                    jsf32
f-prng-jsf64                    jsf64
f-prng-sfc32                    sfc32
f-prng-sfc64                    sfc64
f-prng-xsm32                    xsm32
f-prng-xsm64                    xsm64
f-prng-arbee                    arbee
f-prng-hc256                    hc256
f-prng-trivium                  trivium
t-test-pr                       PractRand test suite, regular settings
t-test-pr8                      PractRand, 8 bit folds
t-test-pr16                     PractRand, 16 bit folds
t-test-pr32                     PractRand, 32 bit folds
t-test-pr64                     PractRand, 64 bit folds
t-test-prmt                     PractRand, multithread
t-test-pr8mt                    PractRand, multithread, 8 bit folds
t-test-pr16mt                   PractRand, multithread, 16 bit folds
t-test-pr32mt                   PractRand, multithread, 32 bit folds
t-test-pr64mt                   PractRand, multithread, 64 bit folds

                * * * DIEHARDER PACKAGE * * *

t-test-dh                       Dieharder, regular settings
t-test-dhd                      Dieharder, test to destruction
t-test-dhr                      Dieharder, test to resolve

                * * * TESTU01 PACKAGE * * *

t-test-u01-smallcrush           TestU01 Small Crush
t-test-u01-crush                TestU01 Crush
t-test-u01-bigcrush             TestU01 Big Crush



TUTORIAL

VERY IMPORTANT

If you are not sure how this works, follow this tutorial. It will get you 
through the concepts one at a time with examples.

The commands are to be typed in your regular shell. Once installed, the short
default commands will be available to all users in all sessions. I think of
it as an extension of the shell. Basic knowledge of the shell is not necessary
but it is recommended.

s-icm64
    s-icm64 have an IO class of O. It means it do not require an stream to 
    function properly. The O indicates it is providing output. If the output is
    not captured it will be displayed on the screen raw binary form. Executing 
    this command can make your terminal do
    crazy things! Go ahead, give it a try!

s-icm64 | f-hex
    Display the stream generated by input converted in hexadecimal format.

g-zeros | f-hex
    Display enless zeros!

g-system | f-size 1m > file.bin
    Get random numbers from /dev/random, limit the size of the stream to 
    1000000 bytes and save the content to a file: file.bin. 
    
    Note: If the file exist alrealy, it will be overwritten. To add data to an
    existing file, replace > with >>. There is no undo with this, everything
    is permanent, play with care!

    Try to change the '1m' with 1M and observe the precise file size of each one.

s-icm64 | f-bench | g-roxo64 | f-void
    The f-bench command will display information about the data going through it.
    INFO relay the information untouched with the minimal amount of overhead
    portably practical. In this configuration it will display the bandwidth
    used by the seeding node, not the output.
    
    Can you change it to make it display information about final output?

s-icm64 | f-write seed.bin | g-roxo64 | f-write rand.bin | f-void
    The f-output command pass data and save a copy to a file. This allow the
    possibility of keeping a copy of the seed generated and the final stream.
    This can help debug and understand bad test results, or satisfy
    your curiosity.



Enjoy softrng! And remember, every files are overwritten without warnings.
Be careful.

GITHUB : https://github.com/sysaulab/softrng
PATREON : https://www.patreon.com/sofTRNG
